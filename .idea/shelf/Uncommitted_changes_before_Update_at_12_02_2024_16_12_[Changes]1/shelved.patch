Index: src/OuvertPile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.List;\r\nimport java.util.Stack;\r\n\r\npublic class OuvertPile implements Ouvert{\r\n    private List ouvert;\r\n    @Override\r\n    public void structure() {\r\n        ouvert = new Stack<List>();\r\n    }\r\n\r\n    @Override\r\n    public void ajout(List liste) {\r\n        ouvert.add(liste);\r\n    }\r\n\r\n    @Override\r\n    public Boolean estVide() {\r\n        return ouvert.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public List teteOuvert() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<Integer> supprimerEtat(Ouvert ouvert) {\r\n        return this.ouvert.remove();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/OuvertPile.java b/src/OuvertPile.java
--- a/src/OuvertPile.java	
+++ b/src/OuvertPile.java	
@@ -2,15 +2,16 @@
 import java.util.Stack;
 
 public class OuvertPile implements Ouvert{
-    private List ouvert;
+    private List<Integer> ouvert;
     @Override
     public void structure() {
-        ouvert = new Stack<List>();
+        ouvert = new Stack<>();
     }
+
 
     @Override
-    public void ajout(List liste) {
-        ouvert.add(liste);
+    public void ajout(List<Integer> liste) {
+        ouvert.push(liste);
     }
 
     @Override
@@ -19,12 +20,17 @@
     }
 
     @Override
-    public List teteOuvert() {
+    public List<Integer> teteOuvert() {
+        if (!ouvert.isEmpty()){
+            return ouvert.peek();
+        }
         return null;
     }
 
-    @Override
-    public List<Integer> supprimerEtat(Ouvert ouvert) {
-        return this.ouvert.remove();
+
+
+    public List<Integer> supprimerEtat(List<Integer> contenu) {
+        ouvert.remove(contenu);
+        return contenu;
     }
 }
Index: src/Ouvert.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.List;\r\n\r\npublic interface Ouvert {\r\n    // retourner la structure appropriée à ouvert\r\n     void structure(); // return new (pile) (file) (liste triee)\r\n     void ajout(List liste);\r\n     Boolean estVide();\r\n     List teteOuvert();\r\n     List supprimerEtat(List<Integer> contenu);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ouvert.java b/src/Ouvert.java
--- a/src/Ouvert.java	
+++ b/src/Ouvert.java	
@@ -3,7 +3,7 @@
 public interface Ouvert {
     // retourner la structure appropriée à ouvert
      void structure(); // return new (pile) (file) (liste triee)
-     void ajout(List liste);
+     void ajout(List<Integer> liste);
      Boolean estVide();
      List teteOuvert();
      List supprimerEtat(List<Integer> contenu);
